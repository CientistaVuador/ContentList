/*
 * This is free and unencumbered software released into the public domain.
 *
 * Anyone is free to copy, modify, publish, use, compile, sell, or
 * distribute this software, either in source code form or as a compiled
 * binary, for any purpose, commercial or non-commercial, and by any
 * means.
 *
 * In jurisdictions that recognize copyright laws, the author or authors
 * of this software dedicate any and all copyright interest in the
 * software to the public domain. We make this dedication for the benefit
 * of the public at large and to the detriment of our heirs and
 * successors. We intend this dedication to be an overt act of
 * relinquishment in perpetuity of all present and future rights to this
 * software under copyright law.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
 * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
 * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
 * IN NO EVENT SHALL THE AUTHORS BE LIABLE FOR ANY CLAIM, DAMAGES OR
 * OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
 * OTHER DEALINGS IN THE SOFTWARE.
 *
 * For more information, please refer to <https://unlicense.org>
 */
package matinilad.contentlist.ui.gui;

import java.awt.Toolkit;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.ByteArrayOutputStream;
import java.io.File;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.PrintStream;
import java.nio.charset.StandardCharsets;
import java.util.ArrayList;
import java.util.List;
import javax.swing.JFileChooser;
import javax.swing.Timer;
import javax.swing.filechooser.FileFilter;
import javax.swing.filechooser.FileNameExtensionFilter;
import matinilad.contentlist.ui.UIUtils;

/**
 *
 * @author Cien
 */
@SuppressWarnings("serial")
public class Log extends javax.swing.JDialog implements ActionListener {

    private final ByteArrayOutputStream byteArrayOut = new ByteArrayOutputStream();
    private final PrintStream out = new PrintStream(this.byteArrayOut, true, StandardCharsets.UTF_8);
    private final List<String> lines = new ArrayList<>();
    private volatile boolean requiresUpdate = false;
    private final Timer timer = new Timer(40, this);
    
    /**
     * Creates new form Log
     */
    public Log(java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        initComponents();
    }
    
    public void println(String line) {
        this.out.println(line);
        if (this.lines.size() >= 100) {
            this.lines.removeFirst();
        }
        this.lines.add(line);
        this.requiresUpdate = true;
    }
    
    @Override
    public void actionPerformed(ActionEvent e) {
        if (!this.requiresUpdate) {
            return;
        }
        StringBuilder b = new StringBuilder();
        for (int i = 0; i < this.lines.size(); i++) {
            b.append(this.lines.get(i));
            if (i != (this.lines.size() - 1)) {
                b.append("\n");
            }
        }
        this.logOutput.setText(b.toString());
        this.requiresUpdate = false;
    }

    @Override
    public void setVisible(boolean b) {
        super.setVisible(b);
        if (isVisible()) {
            actionPerformed(null);
            this.timer.start();
        } else {
            this.timer.stop();
            if (getParent() instanceof MainWindow w) {
                w.clearLogStatus();
            }
        }
    }
    
    /**
     * This method is called from within the constructor to initialize the form. WARNING: Do NOT modify this code. The content of this method is always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        logOutput = new javax.swing.JTextArea();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        saveButton = new javax.swing.JMenuItem();
        jMenu2 = new javax.swing.JMenu();
        clearLogButton = new javax.swing.JMenuItem();

        setTitle("Log");
        setIconImage(null);

        logOutput.setEditable(false);
        logOutput.setColumns(20);
        logOutput.setRows(5);
        jScrollPane1.setViewportView(logOutput);

        jMenu1.setText("File");

        saveButton.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_S, java.awt.event.InputEvent.CTRL_DOWN_MASK));
        saveButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/matinilad/contentlist/ui/gui/save.png"))); // NOI18N
        saveButton.setText("Save");
        saveButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveButtonActionPerformed(evt);
            }
        });
        jMenu1.add(saveButton);

        jMenuBar1.add(jMenu1);

        jMenu2.setText("Edit");

        clearLogButton.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_DELETE, java.awt.event.InputEvent.CTRL_DOWN_MASK));
        clearLogButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/matinilad/contentlist/ui/gui/clear.png"))); // NOI18N
        clearLogButton.setText("Clear");
        clearLogButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                clearLogButtonActionPerformed(evt);
            }
        });
        jMenu2.add(clearLogButton);

        jMenuBar1.add(jMenu2);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 488, Short.MAX_VALUE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 265, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void saveButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveButtonActionPerformed
        JFileChooser chooser = new JFileChooser();
        chooser.setDialogType(JFileChooser.SAVE_DIALOG);
        chooser.setFileSelectionMode(JFileChooser.FILES_ONLY);
        FileFilter logFile = new FileNameExtensionFilter("Log File (.log)", "log");
        FileFilter textFile = new FileNameExtensionFilter("Text File (.txt)", "txt");
        chooser.addChoosableFileFilter(logFile);
        chooser.addChoosableFileFilter(textFile);
        chooser.setFileFilter(logFile);
        chooser.setMultiSelectionEnabled(false);
        int result = chooser.showSaveDialog(this);
        if (result == JFileChooser.APPROVE_OPTION) {
            File selected = chooser.getSelectedFile();
            if (!selected.getName().contains(".")) {
                String extension = ".log";
                if (textFile.equals(chooser.getFileFilter())) {
                    extension = ".txt";
                }
                selected = new File(selected.getParentFile(), selected.getName()+extension);
            }
            try {
                this.out.flush();
                try (FileOutputStream o = new FileOutputStream(selected)) {
                    o.write(this.byteArrayOut.toByteArray());
                }
                println("Log saved to: "+selected.toString());
            } catch (IOException ex) {
                println("Failed to save log to: "+selected.toString());
                println("Error:");
                println(UIUtils.stacktraceOf(ex));
                Toolkit.getDefaultToolkit().beep();
            }
        }
    }//GEN-LAST:event_saveButtonActionPerformed

    private void clearLogButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_clearLogButtonActionPerformed
        this.out.flush();
        this.byteArrayOut.reset();
        this.lines.clear();
        this.logOutput.setText("");
        if (getParent() instanceof MainWindow w) {
            w.clearLogStatus();
        }
    }//GEN-LAST:event_clearLogButtonActionPerformed
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenuItem clearLogButton;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenu jMenu2;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextArea logOutput;
    private javax.swing.JMenuItem saveButton;
    // End of variables declaration//GEN-END:variables

}
