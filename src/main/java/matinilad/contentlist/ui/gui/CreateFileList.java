/*
 * This is free and unencumbered software released into the public domain.
 *
 * Anyone is free to copy, modify, publish, use, compile, sell, or
 * distribute this software, either in source code form or as a compiled
 * binary, for any purpose, commercial or non-commercial, and by any
 * means.
 *
 * In jurisdictions that recognize copyright laws, the author or authors
 * of this software dedicate any and all copyright interest in the
 * software to the public domain. We make this dedication for the benefit
 * of the public at large and to the detriment of our heirs and
 * successors. We intend this dedication to be an overt act of
 * relinquishment in perpetuity of all present and future rights to this
 * software under copyright law.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
 * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
 * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
 * IN NO EVENT SHALL THE AUTHORS BE LIABLE FOR ANY CLAIM, DAMAGES OR
 * OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
 * OTHER DEALINGS IN THE SOFTWARE.
 *
 * For more information, please refer to <https://unlicense.org>
 */
package matinilad.contentlist.ui.gui;

import java.awt.Frame;
import java.awt.Toolkit;
import java.awt.datatransfer.DataFlavor;
import java.awt.datatransfer.UnsupportedFlavorException;
import java.io.File;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.OutputStream;
import java.nio.file.InvalidPathException;
import java.nio.file.Path;
import java.util.ArrayList;
import java.util.HashSet;
import java.util.List;
import java.util.Set;
import javax.swing.DefaultListModel;
import javax.swing.JComponent;
import javax.swing.JFileChooser;
import javax.swing.TransferHandler;
import matinilad.contentlist.ui.UIUtils;

/**
 *
 * @author Cien
 */
@SuppressWarnings("serial")
public class CreateFileList extends javax.swing.JDialog {

    private abstract class FileTransferHandler extends TransferHandler {
        
        public FileTransferHandler() {
            super(null);
        }
        
        @Override
        public int getSourceActions(JComponent c) {
            return TransferHandler.LINK;
        }

        @Override
        public boolean canImport(TransferHandler.TransferSupport support) {
            return support.isDataFlavorSupported(DataFlavor.javaFileListFlavor);
        }

        @SuppressWarnings("unchecked")
        @Override
        public boolean importData(TransferHandler.TransferSupport support) {
            DataFlavor[] flavors = support.getTransferable().getTransferDataFlavors();
            boolean found = false;
            for (DataFlavor e : flavors) {
                if (e.equals(DataFlavor.javaFileListFlavor)) {
                    found = true;
                    break;
                }
            }
            if (!found) {
                Toolkit.getDefaultToolkit().beep();
                return false;
            }
            try {
                List<File> files = (List<File>) support.getTransferable().getTransferData(DataFlavor.javaFileListFlavor);
                if (files.isEmpty()) {
                    Toolkit.getDefaultToolkit().beep();
                    return false;
                }
                return process(files);
            } catch (UnsupportedFlavorException | IOException ex) {
                ex.printStackTrace(System.out);
                Toolkit.getDefaultToolkit().beep();
                return false;
            }
        }
        
        protected abstract boolean process(List<File> files);
        
    }
    
    private final File outputFile;

    /**
     * Creates new form FileList
     */
    public CreateFileList(File outputFile, java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        initComponents();
        this.outputFile = outputFile;
        this.fileList.setTransferHandler(new FileTransferHandler() {
            @Override
            protected boolean process(List<File> files) {
                for (File f:files) {
                    addFileNoDuplicate(f);
                }
                return true;
            }
        });
    }
    
    /**
     * This method is called from within the constructor to initialize the form. WARNING: Do NOT modify this code. The content of this method is always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        fileList = new javax.swing.JList<>();
        this.fileList.setModel(new DefaultListModel<File>());
        createButton = new javax.swing.JButton();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        addFileButton = new javax.swing.JMenuItem();
        removeFileButton = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Input Files/Directories");

        fileList.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                fileListValueChanged(evt);
            }
        });
        jScrollPane1.setViewportView(fileList);

        createButton.setText("Create");
        createButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                createButtonActionPerformed(evt);
            }
        });

        jMenu1.setText("File");

        addFileButton.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_ENTER, 0));
        addFileButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/matinilad/contentlist/ui/gui/add.png"))); // NOI18N
        addFileButton.setText("Add");
        addFileButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addFileButtonActionPerformed(evt);
            }
        });
        jMenu1.add(addFileButton);

        removeFileButton.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_DELETE, 0));
        removeFileButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/matinilad/contentlist/ui/gui/remove.png"))); // NOI18N
        removeFileButton.setText("Remove");
        removeFileButton.setEnabled(false);
        removeFileButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                removeFileButtonActionPerformed(evt);
            }
        });
        jMenu1.add(removeFileButton);

        jMenuBar1.add(jMenu1);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGap(0, 416, Short.MAX_VALUE)
                        .addComponent(createButton)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 236, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(createButton)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void log(int level, String text) {
        if (getParent() instanceof MainWindow w) {
            w.println(level, text);
        }
    }
    
    private void fileListValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_fileListValueChanged
        if (this.fileList.getModel().getSize() == 0) {
            this.removeFileButton.setEnabled(false);
        } else {
            this.removeFileButton.setEnabled(true);
        }
    }//GEN-LAST:event_fileListValueChanged

    private void addFileNoDuplicate(File file) {
        DefaultListModel<File> listModel = (DefaultListModel<File>) this.fileList.getModel();
        if (listModel.contains(file)) {
            return;
        }
        listModel.addElement(file);
    }
    
    private void addFileButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addFileButtonActionPerformed
        JFileChooser chooser = new JFileChooser();
        chooser.setDialogType(JFileChooser.OPEN_DIALOG);
        chooser.setFileSelectionMode(JFileChooser.FILES_AND_DIRECTORIES);
        chooser.setMultiSelectionEnabled(true);
        int result = chooser.showOpenDialog(this);
        if (result == JFileChooser.APPROVE_OPTION) {
            File[] selected = chooser.getSelectedFiles();
            for (File sel:selected) {
                addFileNoDuplicate(sel);
            }
        }
    }//GEN-LAST:event_addFileButtonActionPerformed

    private void removeFileButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_removeFileButtonActionPerformed
        int[] selected = this.fileList.getSelectedIndices();
        if (selected.length == 0) {
            Toolkit.getDefaultToolkit().beep();
            return;
        }
        Set<Integer> set = new HashSet<>();
        for (int i = 0; i < selected.length; i++) {
            set.add(selected[i]);
        }
        DefaultListModel<File> listModel = (DefaultListModel<File>) this.fileList.getModel();
        DefaultListModel<File> newList = new DefaultListModel<>();
        for (int i = 0; i < listModel.size(); i++) {
            if (!set.contains(i)) {
                newList.addElement(listModel.get(i));
            }
        }
        this.fileList.setModel(newList);
        this.removeFileButton.setEnabled(false);
    }//GEN-LAST:event_removeFileButtonActionPerformed

    private void createButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_createButtonActionPerformed
        setVisible(false);
        dispose();
        
        DefaultListModel<File> listModel = (DefaultListModel<File>) this.fileList.getModel();
        List<Path> paths = new ArrayList<>();
        for (int i = 0; i < listModel.size(); i++) {
            File f = listModel.get(i);
            try {
                paths.add(f.toPath());
                log(MainWindow.INFO_LEVEL, "Add "+f.toString());
            } catch (InvalidPathException ex) {
                log(MainWindow.WARN_LEVEL, "File "+f.toString()+" ignored due to a syntax error");
                log(MainWindow.WARN_LEVEL, UIUtils.stacktraceOf(ex));
            }
        }
        
        OutputStream out;
        try {
            out = new FileOutputStream(this.outputFile);
        } catch (IOException ex) {
            Toolkit.getDefaultToolkit().beep();
            log(MainWindow.ERROR_LEVEL, "Failed to create "+this.outputFile+"!");
            log(MainWindow.ERROR_LEVEL, UIUtils.stacktraceOf(ex));
            return;
        }
        
        CreateFileListDialog dialog = new CreateFileListDialog(
                out, paths.toArray(Path[]::new),
                (Frame) getParent(), false
        );
        dialog.setVisible(true);
    }//GEN-LAST:event_createButtonActionPerformed
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenuItem addFileButton;
    private javax.swing.JButton createButton;
    private javax.swing.JList<File> fileList;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JMenuItem removeFileButton;
    // End of variables declaration//GEN-END:variables
}
