/*
 * This is free and unencumbered software released into the public domain.
 *
 * Anyone is free to copy, modify, publish, use, compile, sell, or
 * distribute this software, either in source code form or as a compiled
 * binary, for any purpose, commercial or non-commercial, and by any
 * means.
 *
 * In jurisdictions that recognize copyright laws, the author or authors
 * of this software dedicate any and all copyright interest in the
 * software to the public domain. We make this dedication for the benefit
 * of the public at large and to the detriment of our heirs and
 * successors. We intend this dedication to be an overt act of
 * relinquishment in perpetuity of all present and future rights to this
 * software under copyright law.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
 * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
 * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
 * IN NO EVENT SHALL THE AUTHORS BE LIABLE FOR ANY CLAIM, DAMAGES OR
 * OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
 * OTHER DEALINGS IN THE SOFTWARE.
 *
 * For more information, please refer to <https://unlicense.org>
 */
package matinilad.contentlist.ui.gui;

import java.awt.Toolkit;
import java.awt.event.ActionListener;
import java.io.ByteArrayOutputStream;
import java.io.File;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.PrintStream;
import java.io.UncheckedIOException;
import java.nio.charset.StandardCharsets;
import java.nio.file.Path;
import java.util.ArrayDeque;
import java.util.zip.GZIPOutputStream;
import javax.swing.JFileChooser;
import javax.swing.SwingUtilities;
import javax.swing.Timer;
import javax.swing.filechooser.FileNameExtensionFilter;
import matinilad.contentlist.ContentEntry;
import matinilad.contentlist.ContentListUtils;
import matinilad.contentlist.ContentListValidator;
import static matinilad.contentlist.ContentListValidator.ValidatorReason.EXISTS;
import static matinilad.contentlist.ContentListValidator.ValidatorReason.HASH;
import static matinilad.contentlist.ContentListValidator.ValidatorReason.SAMPLE;
import static matinilad.contentlist.ContentListValidator.ValidatorReason.SIZE;
import static matinilad.contentlist.ContentListValidator.ValidatorReason.TYPE;
import matinilad.contentlist.ContentType;
import matinilad.contentlist.ui.UIUtils;

/**
 *
 * @author Cien
 */
@SuppressWarnings("serial")
public class ValidateDialog extends javax.swing.JDialog implements ContentListValidator.ContentListValidatorCallbacks {

    private final Thread thread;
    private final Path inputFile;
    private final Path baseDirectory;

    private boolean logOutputFinished = false;
    private final ByteArrayOutputStream logBytes;
    private final GZIPOutputStream compressedLogBytes;
    private final PrintStream logStream;

    {
        try {
            this.logBytes = new ByteArrayOutputStream();
            this.compressedLogBytes = new GZIPOutputStream(this.logBytes);
            this.logStream = new PrintStream(this.compressedLogBytes, false, StandardCharsets.UTF_8);
        } catch (IOException ex) {
            throw new UncheckedIOException(ex);
        }
    }

    private final ArrayDeque<String> logLines = new ArrayDeque<>();
    private boolean logRequiresUpdate = false;
    private final Timer logTimer = new Timer(100, (e) -> {
        if (this.logRequiresUpdate) {
            StringBuilder b = new StringBuilder();
            this.logLines.descendingIterator().forEachRemaining((f) -> b.append(f).append("\n"));
            this.logOutput.setText(b.toString());
            this.logRequiresUpdate = false;
        }
    });

    /**
     * Creates new form Validate
     */
    public ValidateDialog(
            Path inputFile, Path baseDirectory,
            java.awt.Frame parent, boolean modal
    ) {
        super(parent, modal);
        initComponents();
        setLocationRelativeTo(null);
        this.logTimer.start();

        this.thread = new Thread(() -> {
            try {
                run();
            } catch (Throwable t) {
                onException(t);
            }
            SwingUtilities.invokeLater(() -> {
                this.cancelButton.setEnabled(false);
                this.saveButton.setEnabled(true);
            });
        });
        this.inputFile = inputFile;
        this.baseDirectory = baseDirectory;
    }

    /**
     * This method is called from within the constructor to initialize the form. WARNING: Do NOT modify this code. The content of this method is always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        currentEntry = new javax.swing.JTextArea();
        jPanel2 = new javax.swing.JPanel();
        currentFile = new javax.swing.JLabel();
        currentFileProgressBar = new javax.swing.JProgressBar();
        currentFileStatus = new javax.swing.JLabel();
        existsCheckBox = new javax.swing.JCheckBox();
        typeCheckBox = new javax.swing.JCheckBox();
        sizeCheckBox = new javax.swing.JCheckBox();
        sampleCheckBox = new javax.swing.JCheckBox();
        hashCheckBox = new javax.swing.JCheckBox();
        jPanel3 = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        logOutput = new javax.swing.JTextArea();
        saveButton = new javax.swing.JButton();
        cancelButton = new javax.swing.JButton();
        entriesStatus = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Validate");
        setMaximumSize(new java.awt.Dimension(550, 570));
        setMinimumSize(new java.awt.Dimension(550, 570));
        setPreferredSize(new java.awt.Dimension(550, 570));
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosed(java.awt.event.WindowEvent evt) {
                formWindowClosed(evt);
            }
            public void windowOpened(java.awt.event.WindowEvent evt) {
                formWindowOpened(evt);
            }
        });

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder("Current Entry"));

        currentEntry.setEditable(false);
        currentEntry.setColumns(20);
        currentEntry.setRows(5);
        currentEntry.setText("/path/to/the/entry\nType: FILE\nCreated on: 12/54/87 12:45\nModified on: 12/65/98 65:12\nSize: 10GB 20MB 30KB 20 Bytes\nSHA256: asdasdasdasdasdasdasdasdas\nSample: asdasdasdasdasdasdasdasdas\n100 Files, 100 Directories");
        jScrollPane1.setViewportView(currentEntry);

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1)
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 144, Short.MAX_VALUE)
                .addContainerGap())
        );

        jPanel2.setBorder(javax.swing.BorderFactory.createTitledBorder("Current File"));

        currentFile.setText("C:\\path\\to\\the\\file.txt");
        currentFile.setMaximumSize(new java.awt.Dimension(494, 16));
        currentFile.setMinimumSize(new java.awt.Dimension(494, 16));
        currentFile.setPreferredSize(new java.awt.Dimension(494, 16));

        currentFileStatus.setText("96.55% - 10TB 10GB 10MB 10KB 102 Bytes out of 10TB 10GB 10MB 12KB 150 Bytes - 150 MB/s");
        currentFileStatus.setMaximumSize(new java.awt.Dimension(494, 16));
        currentFileStatus.setMinimumSize(new java.awt.Dimension(494, 16));
        currentFileStatus.setPreferredSize(new java.awt.Dimension(494, 16));

        existsCheckBox.setSelected(true);
        existsCheckBox.setText("Exists");
        existsCheckBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                existsCheckBoxActionPerformed(evt);
            }
        });

        typeCheckBox.setSelected(true);
        typeCheckBox.setText("Type");
        typeCheckBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                typeCheckBoxActionPerformed(evt);
            }
        });

        sizeCheckBox.setText("Size");
        sizeCheckBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                sizeCheckBoxActionPerformed(evt);
            }
        });

        sampleCheckBox.setText("Sample");
        sampleCheckBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                sampleCheckBoxActionPerformed(evt);
            }
        });

        hashCheckBox.setText("Hash");
        hashCheckBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                hashCheckBoxActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(currentFileProgressBar, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(currentFileStatus, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(currentFile, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(existsCheckBox)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(typeCheckBox)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(sizeCheckBox)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(sampleCheckBox)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(hashCheckBox)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addComponent(currentFile, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(currentFileProgressBar, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(currentFileStatus, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(existsCheckBox)
                    .addComponent(typeCheckBox)
                    .addComponent(sizeCheckBox)
                    .addComponent(sampleCheckBox)
                    .addComponent(hashCheckBox)))
        );

        jPanel3.setBorder(javax.swing.BorderFactory.createTitledBorder("Log"));

        logOutput.setEditable(false);
        logOutput.setColumns(20);
        logOutput.setFont(new java.awt.Font("Monospaced", 0, 12)); // NOI18N
        logOutput.setRows(5);
        logOutput.setText("dfsdfsdfsdgfdsg\nf\ngvcb\ncvb\nghegtretergfdxcvxcv\n");
        jScrollPane2.setViewportView(logOutput);

        saveButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/matinilad/contentlist/ui/gui/save.png"))); // NOI18N
        saveButton.setEnabled(false);
        saveButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(saveButton)
                .addContainerGap())
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 146, Short.MAX_VALUE)
                    .addComponent(saveButton))
                .addContainerGap())
        );

        cancelButton.setText("Cancel");
        cancelButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cancelButtonActionPerformed(evt);
            }
        });

        entriesStatus.setText("1000 Accepted, 1000 Refused, 1000 Processed");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel3, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel2, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(entriesStatus, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(cancelButton)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(cancelButton)
                    .addComponent(entriesStatus))
                .addGap(8, 8, 8))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void run() throws Throwable {
        ContentListValidator.validate(this.inputFile, this.baseDirectory, this);
    }

    private void existsCheckBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_existsCheckBoxActionPerformed
        this.existsCheckBox.setSelected(!this.existsCheckBox.isSelected());
    }//GEN-LAST:event_existsCheckBoxActionPerformed

    private void typeCheckBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_typeCheckBoxActionPerformed
        this.typeCheckBox.setSelected(!this.typeCheckBox.isSelected());
    }//GEN-LAST:event_typeCheckBoxActionPerformed

    private void sizeCheckBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_sizeCheckBoxActionPerformed
        this.sizeCheckBox.setSelected(!this.sizeCheckBox.isSelected());
    }//GEN-LAST:event_sizeCheckBoxActionPerformed

    private void sampleCheckBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_sampleCheckBoxActionPerformed
        this.sampleCheckBox.setSelected(!this.sampleCheckBox.isSelected());
    }//GEN-LAST:event_sampleCheckBoxActionPerformed

    private void hashCheckBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_hashCheckBoxActionPerformed
        this.hashCheckBox.setSelected(!this.hashCheckBox.isSelected());
    }//GEN-LAST:event_hashCheckBoxActionPerformed

    private void formWindowOpened(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowOpened
        this.currentEntry.setText("");
        this.currentFile.setText("");
        this.currentFileStatus.setText("");
        this.existsCheckBox.setSelected(false);
        this.typeCheckBox.setSelected(false);
        this.sizeCheckBox.setSelected(false);
        this.sampleCheckBox.setSelected(false);
        this.hashCheckBox.setSelected(false);
        this.logOutput.setText("");
        this.entriesStatus.setText("");

        this.thread.start();
        log("Processing thread initiated");
    }//GEN-LAST:event_formWindowOpened

    private void cancelButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cancelButtonActionPerformed
        if (this.thread.isAlive()) {
            log("Canceled");
            this.thread.interrupt();
        } else {
            this.cancelButton.setEnabled(false);
        }
    }//GEN-LAST:event_cancelButtonActionPerformed

    private void formWindowClosed(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosed
        this.thread.interrupt();
        this.logTimer.stop();
    }//GEN-LAST:event_formWindowClosed

    private void saveButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveButtonActionPerformed
        if (!this.logOutputFinished) {
            this.logStream.close();
            this.logOutputFinished = true;
        }
        JFileChooser chooser = new JFileChooser();
        chooser.setFileSelectionMode(JFileChooser.FILES_ONLY);
        chooser.setDialogType(JFileChooser.SAVE_DIALOG);
        chooser.setMultiSelectionEnabled(false);
        chooser.setFileFilter(new FileNameExtensionFilter("LOG GZ", "log.gz"));
        int result = chooser.showSaveDialog(this);
        if (result == JFileChooser.APPROVE_OPTION) {
            File selected = chooser.getSelectedFile();
            if (!selected.getName().contains(".")) {
                selected = new File(selected.toString()+".log.gz");
            }
            if (selected.exists() && !selected.isFile()) {
                Toolkit.getDefaultToolkit().beep();
                return;
            }
            byte[] data = this.logBytes.toByteArray();
            try {
                try (FileOutputStream out = new FileOutputStream(selected)) {
                    out.write(data);
                }
            } catch (IOException ex) {
                ex.printStackTrace(System.out);
                Toolkit.getDefaultToolkit().beep();
            }
        }
    }//GEN-LAST:event_saveButtonActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton cancelButton;
    private javax.swing.JTextArea currentEntry;
    private javax.swing.JLabel currentFile;
    private javax.swing.JProgressBar currentFileProgressBar;
    private javax.swing.JLabel currentFileStatus;
    private javax.swing.JLabel entriesStatus;
    private javax.swing.JCheckBox existsCheckBox;
    private javax.swing.JCheckBox hashCheckBox;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTextArea logOutput;
    private javax.swing.JCheckBox sampleCheckBox;
    private javax.swing.JButton saveButton;
    private javax.swing.JCheckBox sizeCheckBox;
    private javax.swing.JCheckBox typeCheckBox;
    // End of variables declaration//GEN-END:variables

    private void log(String s) {
        this.logStream.println(s);
        if (this.logLines.size() > 100) {
            this.logLines.pollLast();
        }
        this.logLines.push(s);
        this.logRequiresUpdate = true;
    }

    @Override
    public void onStart() throws IOException, InterruptedException {
        SwingUtilities.invokeLater(() -> {
            log("Running");
        });
    }

    private ContentEntry entry = null;
    private Path path = null;
    private boolean currentEntryRefused = false;
    private long initialTime = System.currentTimeMillis();
    private int accepted = 0;
    private int refused = 0;

    @Override
    public void onEntryStart(ContentEntry entry, Path path) throws IOException, InterruptedException {
        SwingUtilities.invokeLater(() -> {
            this.entry = entry;
            this.path = path;

            StringBuilder b = new StringBuilder();
            b.append(entry.getPath().toString()).append("\n");
            b.append("Type: ").append(entry.getType()).append("\n");
            b.append("Created on: ").append(UIUtils.asShortLocalizedDateTime(entry.getCreated())).append("\n");
            b.append("Modified on: ").append(UIUtils.asShortLocalizedDateTime(entry.getModified())).append("\n");
            b.append("Size: ").append(UIUtils.formatBytes(entry.getSize())).append("\n");
            if (entry.getType().equals(ContentType.DIRECTORY)) {
                b.append(entry.getFiles()).append(" Files, ").append(entry.getDirectories()).append(" Directories").append("\n");
            }
            byte[] sha256 = entry.getSha256();
            byte[] sample = entry.getSample();
            if (sha256 != null) {
                b.append("SHA256: ").append(ContentListUtils.toHexString(sha256)).append("\n");
            }
            if (sample != null) {
                b.append("Sample: ").append(ContentListUtils.toHexString(sample)).append("\n");
            }
            this.currentEntry.setText(b.toString());
            this.currentFile.setText(path.toString());

            this.existsCheckBox.setSelected(false);
            this.typeCheckBox.setSelected(false);
            this.sizeCheckBox.setSelected(false);
            this.sampleCheckBox.setSelected(false);
            this.hashCheckBox.setSelected(false);

            this.currentFileProgressBar.setValue(0);
            this.currentFileStatus.setText("");

            this.currentEntryRefused = false;
            this.initialTime = System.currentTimeMillis();
        });
    }

    @Override
    public void onEntryAccepted(ContentListValidator.ValidatorReason reason, Object expected, Object found) throws IOException, InterruptedException {
        SwingUtilities.invokeLater(() -> {
            switch (reason) {
                case EXISTS -> {
                    this.existsCheckBox.setSelected(true);
                }
                case TYPE -> {
                    this.typeCheckBox.setSelected(true);
                }
                case SIZE -> {
                    this.sizeCheckBox.setSelected(true);
                }
                case HASH -> {
                    this.hashCheckBox.setSelected(true);
                }
                case SAMPLE -> {
                    this.sampleCheckBox.setSelected(true);
                }
            }
        });
    }

    @Override
    public void onEntryRefused(ContentListValidator.ValidatorReason reason, Object expected, Object found) throws IOException, InterruptedException {
        SwingUtilities.invokeLater(() -> {
            log("WARNING!");
            log("Refused: " + this.entry.getPath().toString());
            log("Real Path: " + this.path.toString());
            switch (reason) {
                case EXISTS -> {
                    log("Reason: Does not exists!");
                }
                case TYPE -> {
                    log("Reason: Expected type " + expected + ", found " + found);
                }
                case SIZE -> {
                    log("Reason: Wrong Size! Expected " + UIUtils.formatBytes((long) expected) + "; found " + UIUtils.formatBytes((long) found));
                }
                case SAMPLE -> {
                    log("Reason: Wrong sample!");
                    log(" Expected: " + ContentListUtils.toHexString((byte[]) expected));
                    log("    Found: " + ContentListUtils.toHexString((byte[]) found));
                }
                case HASH -> {
                    log("Reason: Wrong hash!");
                    log(" Expected: " + ContentListUtils.toHexString((byte[]) expected));
                    log("    Found: " + ContentListUtils.toHexString((byte[]) found));
                }
            }
            this.currentEntryRefused = true;
        });
    }

    @Override
    public void onEntryProgressUpdate(long current, long total) throws IOException, InterruptedException {
        SwingUtilities.invokeLater(() -> {
            if (total != 0) {
                this.currentFileProgressBar.setValue((int) ((((double) current) / total) * 100));
            }
            long time = ((System.currentTimeMillis() - this.initialTime) / 1000);
            long averageSpeed;
            if (time != 0) {
                averageSpeed = current / time;
            } else {
                averageSpeed = 0;
            }
            this.currentFileStatus.setText(UIUtils.formatPercentage(current, total) + " - " + UIUtils.formatBytes(current) + " out of " + UIUtils.formatBytes(total) + " - " + UIUtils.formatSpeed(averageSpeed));
        });
    }

    @Override
    public void onEntryFinish() throws IOException, InterruptedException {
        SwingUtilities.invokeLater(() -> {
            if (this.currentEntryRefused) {
                this.refused++;
            } else {
                this.accepted++;
            }
            this.entriesStatus.setText(this.accepted + " Accepted, " + this.refused + " Refused, " + (this.accepted + this.refused) + " Processed");
        });
    }

    @Override
    public void onFinish() throws IOException, InterruptedException {
        SwingUtilities.invokeLater(() -> {
            log("Done!");
        });
    }

    private void onException(Throwable t) {
        SwingUtilities.invokeLater(() -> {
            if (t == null || t instanceof InterruptedException) {
                return;
            }
            ByteArrayOutputStream out = new ByteArrayOutputStream();
            PrintStream p = new PrintStream(out, true, StandardCharsets.UTF_8);
            t.printStackTrace(p);
            p.flush();
            Toolkit.getDefaultToolkit().beep();
            log("Fatal error!");
            log(out.toString(StandardCharsets.UTF_8));
        });
    }
}
