/*
 * This is free and unencumbered software released into the public domain.
 *
 * Anyone is free to copy, modify, publish, use, compile, sell, or
 * distribute this software, either in source code form or as a compiled
 * binary, for any purpose, commercial or non-commercial, and by any
 * means.
 *
 * In jurisdictions that recognize copyright laws, the author or authors
 * of this software dedicate any and all copyright interest in the
 * software to the public domain. We make this dedication for the benefit
 * of the public at large and to the detriment of our heirs and
 * successors. We intend this dedication to be an overt act of
 * relinquishment in perpetuity of all present and future rights to this
 * software under copyright law.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
 * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
 * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
 * IN NO EVENT SHALL THE AUTHORS BE LIABLE FOR ANY CLAIM, DAMAGES OR
 * OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
 * OTHER DEALINGS IN THE SOFTWARE.
 *
 * For more information, please refer to <https://unlicense.org>
 */
package matinilad.contentlist.ui.gui;

import java.awt.Toolkit;
import java.io.File;
import java.io.IOException;
import javax.swing.SwingUtilities;
import matinilad.contentlist.ContentEntry;
import matinilad.contentlist.ContentFileSystem;
import matinilad.contentlist.ContentListAccess;
import matinilad.contentlist.ui.UIUtils;

/**
 *
 * @author Cien
 */
@SuppressWarnings("serial")
public class OpenFileSystemDialog extends javax.swing.JDialog implements ContentListAccess.ContentListAccessCallbacks {

    private final File file;
    private final Thread thread;

    /**
     * Creates new form OpenFileSystemDialog
     */
    public OpenFileSystemDialog(File file, java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        initComponents();
        this.file = file;
        this.thread = new Thread(() -> {
            try {
                ContentFileSystem fs = ContentFileSystem.of(this.file, OpenFileSystemDialog.this);
                if (getParent() instanceof MainWindow w) {
                    SwingUtilities.invokeLater(() -> {
                        w.openFileSystem(fs);
                    });
                }
            } catch (Throwable t) {
                SwingUtilities.invokeLater(() -> {
                    onException(t);
                });
            }
            SwingUtilities.invokeLater(() -> {
                setVisible(false);
                dispose();
            });
        });
    }

    /**
     * This method is called from within the constructor to initialize the form. WARNING: Do NOT modify this code. The content of this method is always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        progressBar = new javax.swing.JProgressBar();
        currentEntry = new javax.swing.JLabel();
        progressLabel = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Opening");
        setResizable(false);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosed(java.awt.event.WindowEvent evt) {
                formWindowClosed(evt);
            }
            public void windowOpened(java.awt.event.WindowEvent evt) {
                formWindowOpened(evt);
            }
        });

        currentEntry.setText("/current/entry/file.txt");

        progressLabel.setText("96.55% - 10TB 10GB 10MB 10KB 102 Bytes out of 10TB 10GB 10MB 12KB 150 Bytes - 150 MB/s");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(progressBar, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(progressLabel)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addComponent(currentEntry, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(currentEntry)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(progressBar, javax.swing.GroupLayout.PREFERRED_SIZE, 42, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(progressLabel)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void onException(Throwable t) {
        if (!(t instanceof InterruptedException)) {
            Toolkit.getDefaultToolkit().beep();
            log(MainWindow.ERROR_LEVEL, "Failed to read file!");
            log(MainWindow.ERROR_LEVEL, UIUtils.stacktraceOf(t));
        } else {
            log(MainWindow.INFO_LEVEL, "Canceled");
        }
    }

    private void log(int level, String text) {
        if (getParent() instanceof MainWindow w) {
            w.println(level, text);
        }
    }

    private void formWindowClosed(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosed
        this.thread.interrupt();
        log(MainWindow.INFO_LEVEL, "Read window closed.");
    }//GEN-LAST:event_formWindowClosed

    private void formWindowOpened(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowOpened
        this.currentEntry.setText("Starting...");
        this.progressBar.setValue(0);
        this.progressLabel.setText("");
        log(MainWindow.INFO_LEVEL, "Now reading: " + this.file.toString());
        log(MainWindow.INFO_LEVEL, "Starting read thread...");
        this.thread.start();
    }//GEN-LAST:event_formWindowOpened

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel currentEntry;
    private javax.swing.JProgressBar progressBar;
    private javax.swing.JLabel progressLabel;
    // End of variables declaration//GEN-END:variables

    private long initialTime = System.currentTimeMillis();

    @Override
    public void onStart() throws IOException, InterruptedException {
        this.initialTime = System.currentTimeMillis();
        SwingUtilities.invokeLater(() -> {
            log(MainWindow.INFO_LEVEL, "Running");
        });
    }

    @Override
    public void onReadProgressUpdate(long current, long total) throws IOException, InterruptedException {
        SwingUtilities.invokeLater(() -> {
            if (total != 0) {
                this.progressBar.setValue((int) ((((double) current) / total) * 100));
            }
            long time = ((System.currentTimeMillis() - this.initialTime) / 1000);
            long averageSpeed;
            if (time != 0) {
                averageSpeed = current / time;
            } else {
                averageSpeed = 0;
            }
            this.progressLabel.setText(UIUtils.formatPercentage(current, total) + " - " + UIUtils.formatBytes(current) + " out of " + UIUtils.formatBytes(total) + " - " + UIUtils.formatSpeed(averageSpeed));
        });
    }

    @Override
    public void onContentEntryRead(ContentEntry entry, int index) throws IOException, InterruptedException {
        SwingUtilities.invokeLater(() -> {
            this.currentEntry.setText(entry.getPath().toString());
        });
    }

    @Override
    public void onFinish() throws IOException, InterruptedException {
        SwingUtilities.invokeLater(() -> {
            log(MainWindow.INFO_LEVEL, "Finished reading!");
        });
    }
}
