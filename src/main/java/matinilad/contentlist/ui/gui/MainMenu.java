/*
 * This is free and unencumbered software released into the public domain.
 *
 * Anyone is free to copy, modify, publish, use, compile, sell, or
 * distribute this software, either in source code form or as a compiled
 * binary, for any purpose, commercial or non-commercial, and by any
 * means.
 *
 * In jurisdictions that recognize copyright laws, the author or authors
 * of this software dedicate any and all copyright interest in the
 * software to the public domain. We make this dedication for the benefit
 * of the public at large and to the detriment of our heirs and
 * successors. We intend this dedication to be an overt act of
 * relinquishment in perpetuity of all present and future rights to this
 * software under copyright law.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
 * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
 * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
 * IN NO EVENT SHALL THE AUTHORS BE LIABLE FOR ANY CLAIM, DAMAGES OR
 * OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
 * OTHER DEALINGS IN THE SOFTWARE.
 *
 * For more information, please refer to <https://unlicense.org>
 */
package matinilad.contentlist.ui.gui;

import java.awt.Toolkit;
import java.awt.datatransfer.DataFlavor;
import java.awt.datatransfer.UnsupportedFlavorException;
import java.awt.event.KeyEvent;
import java.io.File;
import java.io.IOException;
import java.nio.file.Files;
import java.nio.file.InvalidPathException;
import java.nio.file.Path;
import java.util.ArrayList;
import java.util.HashSet;
import java.util.List;
import java.util.Set;
import java.util.stream.IntStream;
import javax.swing.DefaultListModel;
import javax.swing.JComponent;
import javax.swing.JFileChooser;
import javax.swing.JList;
import javax.swing.ListModel;
import javax.swing.TransferHandler;
import javax.swing.filechooser.FileNameExtensionFilter;

/**
 *
 * @author Cien
 */
@SuppressWarnings("serial")
public class MainMenu extends javax.swing.JFrame {

    private static boolean addElementNoDuplicate(JList<String> list, String element) {
        DefaultListModel<String> model = (DefaultListModel<String>) list.getModel();
        if (!model.contains(element)) {
            model.addElement(element);
            return true;
        }
        return false;
    }
    
    private abstract class FileTransferHandler extends TransferHandler {
        
        public FileTransferHandler() {
            super(null);
        }
        
        @Override
        public int getSourceActions(JComponent c) {
            return TransferHandler.LINK;
        }

        @Override
        public boolean canImport(TransferHandler.TransferSupport support) {
            return support.isDataFlavorSupported(DataFlavor.javaFileListFlavor);
        }

        @SuppressWarnings("unchecked")
        @Override
        public boolean importData(TransferHandler.TransferSupport support) {
            DataFlavor[] flavors = support.getTransferable().getTransferDataFlavors();
            boolean found = false;
            for (DataFlavor e : flavors) {
                if (e.equals(DataFlavor.javaFileListFlavor)) {
                    found = true;
                    break;
                }
            }
            if (!found) {
                Toolkit.getDefaultToolkit().beep();
                return false;
            }
            try {
                List<File> files = (List<File>) support.getTransferable().getTransferData(DataFlavor.javaFileListFlavor);
                if (files.isEmpty()) {
                    Toolkit.getDefaultToolkit().beep();
                    return false;
                }
                return process(files);
            } catch (UnsupportedFlavorException | IOException ex) {
                ex.printStackTrace(System.out);
                Toolkit.getDefaultToolkit().beep();
                return false;
            }
        }
        
        protected abstract boolean process(List<File> files);
        
    }
    
    /**
     * Creates new form MainMenu
     */
    public MainMenu() {
        initComponents();
        setLocationRelativeTo(null);
    }

    /**
     * This method is called from within the constructor to initialize the form. WARNING: Do NOT modify this code. The content of this method is always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jTabbedPane1 = new javax.swing.JTabbedPane();
        jPanel1 = new javax.swing.JPanel();
        jPanel4 = new javax.swing.JPanel();
        createOutputFileField = new javax.swing.JTextField();
        createOutputFileFieldButton = new javax.swing.JButton();
        jPanel5 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        createFileList = new javax.swing.JList<>();
        createFileListAddButton = new javax.swing.JButton();
        createRemoveButton = new javax.swing.JButton();
        createAddFileName = new javax.swing.JTextField();
        createAddFileNameButton = new javax.swing.JButton();
        createButton = new javax.swing.JButton();
        createErrorLabel = new javax.swing.JLabel();
        jPanel2 = new javax.swing.JPanel();
        jPanel10 = new javax.swing.JPanel();
        validateBaseDirectory = new javax.swing.JTextField();
        validateBaseDirectoryButton = new javax.swing.JButton();
        jPanel11 = new javax.swing.JPanel();
        validateInputFile = new javax.swing.JTextField();
        validateInputFileButton = new javax.swing.JButton();
        validateButton = new javax.swing.JButton();
        validateErrorLabel = new javax.swing.JLabel();
        jPanel3 = new javax.swing.JPanel();
        jPanel12 = new javax.swing.JPanel();
        openInputFile = new javax.swing.JTextField();
        openInputFileButton = new javax.swing.JButton();
        openErrorLabel = new javax.swing.JLabel();
        openButton = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Content List");
        setMinimumSize(new java.awt.Dimension(550, 370));
        setPreferredSize(new java.awt.Dimension(550, 370));
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowOpened(java.awt.event.WindowEvent evt) {
                formWindowOpened(evt);
            }
        });

        jPanel4.setBorder(javax.swing.BorderFactory.createTitledBorder("Output File"));

        createOutputFileField.setText("/");

        createOutputFileFieldButton.setText("...");
        createOutputFileFieldButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                createOutputFileFieldButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(createOutputFileField)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(createOutputFileFieldButton)
                .addContainerGap())
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(createOutputFileField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(createOutputFileFieldButton))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jPanel5.setBorder(javax.swing.BorderFactory.createTitledBorder("Input Files/Directories"));

        createFileList.setModel(new DefaultListModel<String>());
        createFileList.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                createFileListKeyPressed(evt);
            }
        });
        jScrollPane1.setViewportView(createFileList);

        createFileListAddButton.setText("+");
        createFileListAddButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                createFileListAddButtonActionPerformed(evt);
            }
        });

        createRemoveButton.setText("-");
        createRemoveButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                createRemoveButtonActionPerformed(evt);
            }
        });

        createAddFileName.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                createAddFileNameKeyPressed(evt);
            }
        });

        createAddFileNameButton.setText(">");
        createAddFileNameButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                createAddFileNameButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel5Layout = new javax.swing.GroupLayout(jPanel5);
        jPanel5.setLayout(jPanel5Layout);
        jPanel5Layout.setHorizontalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1)
                    .addGroup(jPanel5Layout.createSequentialGroup()
                        .addComponent(createFileListAddButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(createRemoveButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(createAddFileName)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(createAddFileNameButton)))
                .addContainerGap())
        );
        jPanel5Layout.setVerticalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 146, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(createFileListAddButton)
                    .addComponent(createRemoveButton)
                    .addComponent(createAddFileName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(createAddFileNameButton))
                .addContainerGap())
        );

        createButton.setText("Create");
        createButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                createButtonActionPerformed(evt);
            }
        });

        createErrorLabel.setText("Hello!");
        createErrorLabel.setMaximumSize(new java.awt.Dimension(440, 16));
        createErrorLabel.setMinimumSize(new java.awt.Dimension(440, 16));
        createErrorLabel.setPreferredSize(new java.awt.Dimension(440, 16));

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel5, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel4, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(createErrorLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 440, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(createButton)))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel5, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGap(11, 11, 11)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(createButton)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(3, 3, 3)
                        .addComponent(createErrorLabel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );

        jTabbedPane1.addTab("Create", jPanel1);

        jPanel10.setBorder(javax.swing.BorderFactory.createTitledBorder("Base Directory"));

        validateBaseDirectory.setText("/");

        validateBaseDirectoryButton.setText("...");
        validateBaseDirectoryButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                validateBaseDirectoryButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel10Layout = new javax.swing.GroupLayout(jPanel10);
        jPanel10.setLayout(jPanel10Layout);
        jPanel10Layout.setHorizontalGroup(
            jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel10Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(validateBaseDirectory)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(validateBaseDirectoryButton)
                .addContainerGap())
        );
        jPanel10Layout.setVerticalGroup(
            jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel10Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(validateBaseDirectory, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(validateBaseDirectoryButton))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jPanel11.setBorder(javax.swing.BorderFactory.createTitledBorder("Input File"));

        validateInputFile.setText("/");

        validateInputFileButton.setText("...");
        validateInputFileButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                validateInputFileButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel11Layout = new javax.swing.GroupLayout(jPanel11);
        jPanel11.setLayout(jPanel11Layout);
        jPanel11Layout.setHorizontalGroup(
            jPanel11Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel11Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(validateInputFile)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(validateInputFileButton)
                .addContainerGap())
        );
        jPanel11Layout.setVerticalGroup(
            jPanel11Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel11Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel11Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(validateInputFile, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(validateInputFileButton))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        validateButton.setText("Validate");
        validateButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                validateButtonActionPerformed(evt);
            }
        });

        validateErrorLabel.setText("Hello!");
        validateErrorLabel.setMaximumSize(new java.awt.Dimension(440, 16));
        validateErrorLabel.setMinimumSize(new java.awt.Dimension(440, 16));
        validateErrorLabel.setPreferredSize(new java.awt.Dimension(440, 16));

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jPanel10, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel11, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(validateErrorLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(validateButton)))
                .addContainerGap())
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel11, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel10, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 163, Short.MAX_VALUE)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(validateButton)
                    .addComponent(validateErrorLabel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );

        jTabbedPane1.addTab("Validate", jPanel2);

        jPanel12.setBorder(javax.swing.BorderFactory.createTitledBorder("Input File"));

        openInputFile.setText("/");

        openInputFileButton.setText("...");
        openInputFileButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                openInputFileButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel12Layout = new javax.swing.GroupLayout(jPanel12);
        jPanel12.setLayout(jPanel12Layout);
        jPanel12Layout.setHorizontalGroup(
            jPanel12Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel12Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(openInputFile)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(openInputFileButton)
                .addContainerGap())
        );
        jPanel12Layout.setVerticalGroup(
            jPanel12Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel12Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel12Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(openInputFile, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(openInputFileButton))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        openErrorLabel.setText("Hello!");
        openErrorLabel.setMaximumSize(new java.awt.Dimension(440, 16));
        openErrorLabel.setMinimumSize(new java.awt.Dimension(440, 16));
        openErrorLabel.setPreferredSize(new java.awt.Dimension(440, 16));

        openButton.setText("Open");
        openButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                openButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel12, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createSequentialGroup()
                        .addComponent(openErrorLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(openButton)))
                .addContainerGap())
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel12, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 227, Short.MAX_VALUE)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(openButton)
                    .addComponent(openErrorLabel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );

        jTabbedPane1.addTab("Open", jPanel3);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jTabbedPane1)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jTabbedPane1))
        );

        jTabbedPane1.getAccessibleContext().setAccessibleName("Open");

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void createOutputFileFieldButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_createOutputFileFieldButtonActionPerformed
        JFileChooser chooser = new JFileChooser(new File(""));
        chooser.setDialogType(JFileChooser.SAVE_DIALOG);
        chooser.setFileSelectionMode(JFileChooser.FILES_ONLY);
        chooser.setMultiSelectionEnabled(false);
        chooser.setFileFilter(new FileNameExtensionFilter("CSV", "csv"));
        int state = chooser.showSaveDialog(this);
        if (state == JFileChooser.APPROVE_OPTION) {
            String text = chooser.getSelectedFile().toString();
            if (!text.contains(".")) {
                text += ".csv";
            }
            this.createOutputFileField.setText(text);
        }
    }//GEN-LAST:event_createOutputFileFieldButtonActionPerformed

    private void formWindowOpened(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowOpened
        this.createOutputFileField.setText(new File("List.csv").getAbsolutePath());
        this.createOutputFileField.setTransferHandler(new FileTransferHandler() {
            @Override
            protected boolean process(List<File> files) {
                File first = files.get(0);
                if (!first.exists() || !first.isFile()) {
                    Toolkit.getDefaultToolkit().beep();
                    return false;
                }
                MainMenu.this.createOutputFileField.setText(first.getAbsolutePath());
                return true;
            }
        });
        this.createFileList.setTransferHandler(new FileTransferHandler() {
            @Override
            protected boolean process(List<File> files) {
                for (File f : files) {
                    if (!f.exists()) {
                        continue;
                    }
                    addElementNoDuplicate(MainMenu.this.createFileList, f.getAbsolutePath());
                }
                return true;
            }
        });
        this.createAddFileName.setTransferHandler(new FileTransferHandler() {
            @Override
            protected boolean process(List<File> files) {
                File first = files.get(0);
                if (!first.exists()) {
                    Toolkit.getDefaultToolkit().beep();
                    return false;
                }
                MainMenu.this.createAddFileName.setText(first.getAbsolutePath());
                return true;
            }
        });
        
        
        this.validateInputFile.setText(new File("List.csv").getAbsolutePath());
        this.validateBaseDirectory.setText(new File("").getAbsolutePath());
        this.validateInputFile.setTransferHandler(new FileTransferHandler() {
            @Override
            protected boolean process(List<File> files) {
                File first = files.get(0);
                if (!first.exists() || !first.isFile()) {
                    Toolkit.getDefaultToolkit().beep();
                    return false;
                }
                MainMenu.this.validateInputFile.setText(first.getAbsolutePath());
                MainMenu.this.validateBaseDirectory.setText(first.getAbsoluteFile().getParent());
                return true;
            }
        });
        this.validateBaseDirectory.setTransferHandler(new FileTransferHandler() {
            @Override
            protected boolean process(List<File> files) {
                File first = files.get(0);
                if (!first.exists() || !first.isDirectory()) {
                    Toolkit.getDefaultToolkit().beep();
                    return false;
                }
                MainMenu.this.validateBaseDirectory.setText(first.getAbsolutePath());
                return true;
            }
        });
        
        this.openInputFile.setText(new File("List.csv").getAbsolutePath());
        this.openInputFile.setTransferHandler(new FileTransferHandler() {
            @Override
            protected boolean process(List<File> files) {
                File first = files.get(0);
                if (!first.exists() || !first.isFile()) {
                    Toolkit.getDefaultToolkit().beep();
                    return false;
                }
                MainMenu.this.openInputFile.setText(first.getAbsolutePath());
                return true;
            }
        });
    }//GEN-LAST:event_formWindowOpened

    private void removeSelectedItems(JList<String> list) {
        int[] selected = this.createFileList.getSelectedIndices();
        if (selected.length != 0) {
            Set<Integer> set = new HashSet<>();
            set.addAll(IntStream.of(selected).boxed().toList());

            DefaultListModel<String> oldModel = (DefaultListModel<String>) list.getModel();
            DefaultListModel<String> newModel = new DefaultListModel<>();
            for (int i = 0; i < oldModel.size(); i++) {
                if (!set.contains(i)) {
                    newModel.addElement(oldModel.elementAt(i));
                }
            }
            list.setModel(newModel);
        } else {
            Toolkit.getDefaultToolkit().beep();
        }
    }

    private void createFileListKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_createFileListKeyPressed
        if (evt.getKeyCode() == KeyEvent.VK_DELETE 
                || evt.getKeyCode() == KeyEvent.VK_BACK_SPACE) {
            removeSelectedItems(this.createFileList);
        }
    }//GEN-LAST:event_createFileListKeyPressed

    private void createRemoveButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_createRemoveButtonActionPerformed
        removeSelectedItems(this.createFileList);
    }//GEN-LAST:event_createRemoveButtonActionPerformed

    private void createAddFileNameButtonActionPerformed() {
        String text = this.createAddFileName.getText();
        if (text == null || text.isBlank()) {
            Toolkit.getDefaultToolkit().beep();
            return;
        }
        Path p;
        try {
            p = Path.of(text);
        } catch (InvalidPathException ex) {
            ex.printStackTrace(System.out);
            Toolkit.getDefaultToolkit().beep();
            return;
        }
        if (!Files.exists(p)) {
            Toolkit.getDefaultToolkit().beep();
            return;
        }
        this.createAddFileName.setText("");
        addElementNoDuplicate(this.createFileList, p.toAbsolutePath().toString());
    }
    
    private void createAddFileNameButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_createAddFileNameButtonActionPerformed
        createAddFileNameButtonActionPerformed();
    }//GEN-LAST:event_createAddFileNameButtonActionPerformed

    private void createFileListAddButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_createFileListAddButtonActionPerformed
        JFileChooser chooser = new JFileChooser(new File(""));
        chooser.setDialogType(JFileChooser.SAVE_DIALOG);
        chooser.setFileSelectionMode(JFileChooser.FILES_AND_DIRECTORIES);
        chooser.setMultiSelectionEnabled(true);
        int state = chooser.showOpenDialog(this);
        if (state == JFileChooser.APPROVE_OPTION) {
            File[] files = chooser.getSelectedFiles();
            for (File file : files) {
                addElementNoDuplicate(this.createFileList, file.getAbsolutePath());
            }
        }
    }//GEN-LAST:event_createFileListAddButtonActionPerformed

    private void createButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_createButtonActionPerformed
        Path outputFile;
        try {
            outputFile = Path.of(this.createOutputFileField.getText());
        } catch (InvalidPathException ex) {
            this.createErrorLabel.setText("Invalid output file path!");
            Toolkit.getDefaultToolkit().beep();
            ex.printStackTrace(System.out);
            return;
        }
        outputFile = outputFile.toAbsolutePath();
        
        Path outputFileDirectories = outputFile.getParent();
        try {
            Files.createDirectories(outputFileDirectories);
            if (!Files.exists(outputFileDirectories)) {
                throw new IOException();
            }
        } catch (IOException ex) {
            this.createErrorLabel.setText("Failed to create ouput file directories!");
            Toolkit.getDefaultToolkit().beep();
            ex.printStackTrace(System.out);
            return;
        }
        if (Files.exists(outputFile) && !Files.isRegularFile(outputFile)) {
            this.createErrorLabel.setText("Output file is not a file!");
            Toolkit.getDefaultToolkit().beep();
            return;
        }
        
        List<Path> inputPaths = new ArrayList<>();
        ListModel<String> model = this.createFileList.getModel();
        boolean failed = false;
        for (int i = 0; i < model.getSize(); i++) {
            Path p;
            try {
                p = Path.of(model.getElementAt(i));
                inputPaths.add(p);
            } catch (InvalidPathException ex) {
                failed = true;
            }
        }
        if (failed) {
            this.createErrorLabel.setText("Warning: Some input files/directories failed syntax validation!");
            Toolkit.getDefaultToolkit().beep();
            return;
        }
        
        try {
            new CreateDialog(
                    Files.newOutputStream(outputFile),
                    inputPaths.toArray(Path[]::new),
                    this,
                    false
            ).setVisible(true);
        } catch (IOException ex) {
            this.createErrorLabel.setText("Output File Error: "+ex.getLocalizedMessage());
            Toolkit.getDefaultToolkit().beep();
            ex.printStackTrace(System.out);
            return;
        }
    }//GEN-LAST:event_createButtonActionPerformed
    
    private void validateInputFileButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_validateInputFileButtonActionPerformed
        JFileChooser chooser = new JFileChooser(new File(""));
        chooser.setDialogType(JFileChooser.OPEN_DIALOG);
        chooser.setFileSelectionMode(JFileChooser.FILES_ONLY);
        chooser.setFileFilter(new FileNameExtensionFilter("CSV", "csv"));
        chooser.setMultiSelectionEnabled(false);
        int state = chooser.showOpenDialog(this);
        if (state == JFileChooser.APPROVE_OPTION) {
            File file = chooser.getSelectedFile();
            if (file == null || !file.exists() || !file.isFile()) {
                Toolkit.getDefaultToolkit().beep();
                return;
            }
            this.validateInputFile.setText(file.getAbsolutePath());
            this.validateBaseDirectory.setText(file.getAbsoluteFile().getParent());
        }
    }//GEN-LAST:event_validateInputFileButtonActionPerformed

    private void validateBaseDirectoryButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_validateBaseDirectoryButtonActionPerformed
        JFileChooser chooser = new JFileChooser(new File(""));
        chooser.setDialogType(JFileChooser.OPEN_DIALOG);
        chooser.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
        chooser.setMultiSelectionEnabled(false);
        int state = chooser.showOpenDialog(this);
        if (state == JFileChooser.APPROVE_OPTION) {
            File file = chooser.getSelectedFile();
            if (file == null || !file.exists() || !file.isDirectory()) {
                Toolkit.getDefaultToolkit().beep();
                return;
            }
            this.validateBaseDirectory.setText(file.getAbsolutePath());
        }
    }//GEN-LAST:event_validateBaseDirectoryButtonActionPerformed

    private void validateButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_validateButtonActionPerformed
        Path inputFile;
        try {
            inputFile = Path.of(this.validateInputFile.getText());
        } catch (InvalidPathException ex) {
            this.validateErrorLabel.setText("Invalid input file path!");
            Toolkit.getDefaultToolkit().beep();
            ex.printStackTrace(System.out);
            return;
        }
        if (!Files.exists(inputFile)) {
            this.validateErrorLabel.setText("Input file does not exists!");
            Toolkit.getDefaultToolkit().beep();
            return;
        }
        if (!Files.isRegularFile(inputFile)) {
            this.validateErrorLabel.setText("Input file is not a file!");
            Toolkit.getDefaultToolkit().beep();
            return;
        }
        
        Path baseDirectory;
        try {
            baseDirectory = Path.of(this.validateBaseDirectory.getText());
        } catch (InvalidPathException ex) {
            this.validateErrorLabel.setText("Invalid base directory path!");
            Toolkit.getDefaultToolkit().beep();
            ex.printStackTrace(System.out);
            return;
        }
        if (!Files.exists(baseDirectory)) {
            this.validateErrorLabel.setText("Base directory does not exists!");
            Toolkit.getDefaultToolkit().beep();
            return;
        }
        if (!Files.isDirectory(baseDirectory)) {
            this.validateErrorLabel.setText("Base directory is not a file!");
            Toolkit.getDefaultToolkit().beep();
            return;
        }
        
        new ValidateDialog(inputFile, baseDirectory, this, false).setVisible(true);
    }//GEN-LAST:event_validateButtonActionPerformed

    private void openInputFileButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_openInputFileButtonActionPerformed
        JFileChooser chooser = new JFileChooser(new File(""));
        chooser.setDialogType(JFileChooser.OPEN_DIALOG);
        chooser.setFileSelectionMode(JFileChooser.FILES_ONLY);
        chooser.setFileFilter(new FileNameExtensionFilter("CSV", "csv"));
        chooser.setMultiSelectionEnabled(false);
        int state = chooser.showOpenDialog(this);
        if (state == JFileChooser.APPROVE_OPTION) {
            File file = chooser.getSelectedFile();
            if (file == null || !file.exists() || !file.isFile()) {
                Toolkit.getDefaultToolkit().beep();
                return;
            }
            this.openInputFile.setText(file.getAbsolutePath());
        }
    }//GEN-LAST:event_openInputFileButtonActionPerformed

    private void openButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_openButtonActionPerformed
        new OpenDialog(this, false).setVisible(true);
    }//GEN-LAST:event_openButtonActionPerformed

    private void createAddFileNameKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_createAddFileNameKeyPressed
        if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
            createAddFileNameButtonActionPerformed();
        }
    }//GEN-LAST:event_createAddFileNameKeyPressed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField createAddFileName;
    private javax.swing.JButton createAddFileNameButton;
    private javax.swing.JButton createButton;
    private javax.swing.JLabel createErrorLabel;
    private javax.swing.JList<String> createFileList;
    private javax.swing.JButton createFileListAddButton;
    private javax.swing.JTextField createOutputFileField;
    private javax.swing.JButton createOutputFileFieldButton;
    private javax.swing.JButton createRemoveButton;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel10;
    private javax.swing.JPanel jPanel11;
    private javax.swing.JPanel jPanel12;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JButton openButton;
    private javax.swing.JLabel openErrorLabel;
    private javax.swing.JTextField openInputFile;
    private javax.swing.JButton openInputFileButton;
    private javax.swing.JTextField validateBaseDirectory;
    private javax.swing.JButton validateBaseDirectoryButton;
    private javax.swing.JButton validateButton;
    private javax.swing.JLabel validateErrorLabel;
    private javax.swing.JTextField validateInputFile;
    private javax.swing.JButton validateInputFileButton;
    // End of variables declaration//GEN-END:variables
}
